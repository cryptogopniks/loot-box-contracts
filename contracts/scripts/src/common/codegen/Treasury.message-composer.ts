/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Uint128, Decimal, WeightInfo, NftInfoForString, QueryMsg, MigrateMsg, Addr, Balance, NftInfoForAddr, Config, ArrayOfAddr } from "./Treasury.types";
export interface TreasuryMsg {
  contractAddress: string;
  sender: string;
  increaseBalance: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  send: ({
    denom,
    payment,
    recipient,
    rewards
  }: {
    denom: string;
    payment: Uint128;
    recipient: string;
    rewards: Uint128;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  increaseRewards: ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  sendNft: ({
    collection,
    recipient,
    tokenId
  }: {
    collection: string;
    recipient: string;
    tokenId: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptAdminRole: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createPlatform: ({
    boxPrice,
    denom,
    distribution
  }: {
    boxPrice: Uint128;
    denom: string;
    distribution?: WeightInfo[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  addPlatform: ({
    address
  }: {
    address: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removePlatform: ({
    address
  }: {
    address: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  deposit: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  depositNft: ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    admin,
    platformCodeId,
    worker
  }: {
    admin?: string;
    platformCodeId?: number;
    worker?: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  lock: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unlock: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdraw: ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  withdrawNft: ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  retractNft: ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateNftPrice: ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class TreasuryMsgComposer implements TreasuryMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.increaseBalance = this.increaseBalance.bind(this);
    this.send = this.send.bind(this);
    this.increaseRewards = this.increaseRewards.bind(this);
    this.sendNft = this.sendNft.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.createPlatform = this.createPlatform.bind(this);
    this.addPlatform = this.addPlatform.bind(this);
    this.removePlatform = this.removePlatform.bind(this);
    this.deposit = this.deposit.bind(this);
    this.depositNft = this.depositNft.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.lock = this.lock.bind(this);
    this.unlock = this.unlock.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.withdrawNft = this.withdrawNft.bind(this);
    this.retractNft = this.retractNft.bind(this);
    this.updateNftPrice = this.updateNftPrice.bind(this);
  }
  increaseBalance = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          increase_balance: {}
        })),
        funds: _funds
      })
    };
  };
  send = ({
    denom,
    payment,
    recipient,
    rewards
  }: {
    denom: string;
    payment: Uint128;
    recipient: string;
    rewards: Uint128;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          send: {
            denom,
            payment,
            recipient,
            rewards
          }
        })),
        funds: _funds
      })
    };
  };
  increaseRewards = ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          increase_rewards: {
            amount,
            denom
          }
        })),
        funds: _funds
      })
    };
  };
  sendNft = ({
    collection,
    recipient,
    tokenId
  }: {
    collection: string;
    recipient: string;
    tokenId: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          send_nft: {
            collection,
            recipient,
            token_id: tokenId
          }
        })),
        funds: _funds
      })
    };
  };
  acceptAdminRole = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_admin_role: {}
        })),
        funds: _funds
      })
    };
  };
  createPlatform = ({
    boxPrice,
    denom,
    distribution
  }: {
    boxPrice: Uint128;
    denom: string;
    distribution?: WeightInfo[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_platform: {
            box_price: boxPrice,
            denom,
            distribution
          }
        })),
        funds: _funds
      })
    };
  };
  addPlatform = ({
    address
  }: {
    address: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          add_platform: {
            address
          }
        })),
        funds: _funds
      })
    };
  };
  removePlatform = ({
    address
  }: {
    address: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_platform: {
            address
          }
        })),
        funds: _funds
      })
    };
  };
  deposit = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit: {}
        })),
        funds: _funds
      })
    };
  };
  depositNft = ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          deposit_nft: {
            nft_info_list: nftInfoList
          }
        })),
        funds: _funds
      })
    };
  };
  updateConfig = ({
    admin,
    platformCodeId,
    worker
  }: {
    admin?: string;
    platformCodeId?: number;
    worker?: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            admin,
            platform_code_id: platformCodeId,
            worker
          }
        })),
        funds: _funds
      })
    };
  };
  lock = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          lock: {}
        })),
        funds: _funds
      })
    };
  };
  unlock = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unlock: {}
        })),
        funds: _funds
      })
    };
  };
  withdraw = ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw: {
            amount,
            denom
          }
        })),
        funds: _funds
      })
    };
  };
  withdrawNft = ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          withdraw_nft: {
            nft_info_list: nftInfoList
          }
        })),
        funds: _funds
      })
    };
  };
  retractNft = ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          retract_nft: {
            nft_info_list: nftInfoList
          }
        })),
        funds: _funds
      })
    };
  };
  updateNftPrice = ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_nft_price: {
            nft_info_list: nftInfoList
          }
        })),
        funds: _funds
      })
    };
  };
}