/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Decimal, InstantiateMsg, ExecuteMsg, Timestamp, Uint64, HexBinary, NoisCallback, QueryMsg, MigrateMsg, BoxList, Addr, Config } from "./Platform.types";
export interface PlatformReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  queryBoxList: () => Promise<BoxList>;
}
export class PlatformQueryClient implements PlatformReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryBoxList = this.queryBoxList.bind(this);
  }
  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryBoxList = async (): Promise<BoxList> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_box_list: {}
    });
  };
}
export interface PlatformInterface extends PlatformReadOnlyInterface {
  contractAddress: string;
  sender: string;
  noisReceive: ({
    callback
  }: {
    callback: NoisCallback;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    boxListLength,
    boxPrice,
    priceAndWeightList,
    proxy,
    worker
  }: {
    admin?: string;
    boxListLength?: number;
    boxPrice?: Uint128;
    priceAndWeightList?: Uint128[][][];
    proxy?: string;
    worker?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  requestBoxList: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PlatformClient extends PlatformQueryClient implements PlatformInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.noisReceive = this.noisReceive.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.requestBoxList = this.requestBoxList.bind(this);
  }
  noisReceive = async ({
    callback
  }: {
    callback: NoisCallback;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      nois_receive: {
        callback
      }
    }, fee, memo, _funds);
  };
  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    boxListLength,
    boxPrice,
    priceAndWeightList,
    proxy,
    worker
  }: {
    admin?: string;
    boxListLength?: number;
    boxPrice?: Uint128;
    priceAndWeightList?: Uint128[][][];
    proxy?: string;
    worker?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        box_list_length: boxListLength,
        box_price: boxPrice,
        price_and_weight_list: priceAndWeightList,
        proxy,
        worker
      }
    }, fee, memo, _funds);
  };
  requestBoxList = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request_box_list: {}
    }, fee, memo, _funds);
  };
}