/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Decimal, WeightInfo, NftInfoForString, QueryMsg, MigrateMsg, Addr, Balance, NftInfoForAddr, Config, ArrayOfAddr } from "./Treasury.types";
export interface TreasuryReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  queryBalance: () => Promise<Balance>;
  queryPlatformList: () => Promise<ArrayOfAddr>;
  queryRemovedPlatformList: () => Promise<ArrayOfAddr>;
}
export class TreasuryQueryClient implements TreasuryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryBalance = this.queryBalance.bind(this);
    this.queryPlatformList = this.queryPlatformList.bind(this);
    this.queryRemovedPlatformList = this.queryRemovedPlatformList.bind(this);
  }
  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryBalance = async (): Promise<Balance> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_balance: {}
    });
  };
  queryPlatformList = async (): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_platform_list: {}
    });
  };
  queryRemovedPlatformList = async (): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_removed_platform_list: {}
    });
  };
}
export interface TreasuryInterface extends TreasuryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  increaseBalance: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  send: ({
    amount,
    denom,
    recipient
  }: {
    amount: Uint128;
    denom: string;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  increaseRewards: ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  sendNft: ({
    collection,
    recipient,
    tokenId
  }: {
    collection: string;
    recipient: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  createPlatform: ({
    boxPrice,
    denom,
    distribution
  }: {
    boxPrice: Uint128;
    denom: string;
    distribution?: WeightInfo[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  addPlatform: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removePlatform: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  deposit: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  depositNft: ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    platformCodeId,
    worker
  }: {
    admin?: string;
    platformCodeId?: number;
    worker?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  lock: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unlock: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawNft: ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateNftPrice: ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TreasuryClient extends TreasuryQueryClient implements TreasuryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.increaseBalance = this.increaseBalance.bind(this);
    this.send = this.send.bind(this);
    this.increaseRewards = this.increaseRewards.bind(this);
    this.sendNft = this.sendNft.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.createPlatform = this.createPlatform.bind(this);
    this.addPlatform = this.addPlatform.bind(this);
    this.removePlatform = this.removePlatform.bind(this);
    this.deposit = this.deposit.bind(this);
    this.depositNft = this.depositNft.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.lock = this.lock.bind(this);
    this.unlock = this.unlock.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.withdrawNft = this.withdrawNft.bind(this);
    this.updateNftPrice = this.updateNftPrice.bind(this);
  }
  increaseBalance = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      increase_balance: {}
    }, fee, memo, _funds);
  };
  send = async ({
    amount,
    denom,
    recipient
  }: {
    amount: Uint128;
    denom: string;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send: {
        amount,
        denom,
        recipient
      }
    }, fee, memo, _funds);
  };
  increaseRewards = async ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      increase_rewards: {
        amount,
        denom
      }
    }, fee, memo, _funds);
  };
  sendNft = async ({
    collection,
    recipient,
    tokenId
  }: {
    collection: string;
    recipient: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send_nft: {
        collection,
        recipient,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  createPlatform = async ({
    boxPrice,
    denom,
    distribution
  }: {
    boxPrice: Uint128;
    denom: string;
    distribution?: WeightInfo[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_platform: {
        box_price: boxPrice,
        denom,
        distribution
      }
    }, fee, memo, _funds);
  };
  addPlatform = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_platform: {
        address
      }
    }, fee, memo, _funds);
  };
  removePlatform = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_platform: {
        address
      }
    }, fee, memo, _funds);
  };
  deposit = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {}
    }, fee, memo, _funds);
  };
  depositNft = async ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit_nft: {
        nft_info_list: nftInfoList
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    platformCodeId,
    worker
  }: {
    admin?: string;
    platformCodeId?: number;
    worker?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        platform_code_id: platformCodeId,
        worker
      }
    }, fee, memo, _funds);
  };
  lock = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      lock: {}
    }, fee, memo, _funds);
  };
  unlock = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unlock: {}
    }, fee, memo, _funds);
  };
  withdraw = async ({
    amount,
    denom
  }: {
    amount: Uint128;
    denom: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount,
        denom
      }
    }, fee, memo, _funds);
  };
  withdrawNft = async ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_nft: {
        nft_info_list: nftInfoList
      }
    }, fee, memo, _funds);
  };
  updateNftPrice = async ({
    nftInfoList
  }: {
    nftInfoList: NftInfoForString[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_nft_price: {
        nft_info_list: nftInfoList
      }
    }, fee, memo, _funds);
  };
}