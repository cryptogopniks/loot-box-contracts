/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, TokenUnverified, RawPriceItem, FundsForTokenUnverified, CurrencyForTokenUnverified, QueryMsg, MigrateMsg, Uint64, Addr, Config, Token, ArrayOfPriceItem, PriceItem, FundsForToken, CurrencyForToken } from "./Oracle.types";
export interface OracleReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<Config>;
  queryPrices: ({
    collectionAddresses,
    limit,
    startAfter
  }: {
    collectionAddresses?: string[];
    limit?: number;
    startAfter?: string;
  }) => Promise<ArrayOfPriceItem>;
  queryBlockTime: () => Promise<Uint64>;
}
export class OracleQueryClient implements OracleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryPrices = this.queryPrices.bind(this);
    this.queryBlockTime = this.queryBlockTime.bind(this);
  }

  queryConfig = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryPrices = async ({
    collectionAddresses,
    limit,
    startAfter
  }: {
    collectionAddresses?: string[];
    limit?: number;
    startAfter?: string;
  }): Promise<ArrayOfPriceItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_prices: {
        collection_addresses: collectionAddresses,
        limit,
        start_after: startAfter
      }
    });
  };
  queryBlockTime = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_block_time: {}
    });
  };
}
export interface OracleInterface extends OracleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    scheduler,
    worker
  }: {
    admin?: string;
    scheduler?: string;
    worker?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updatePrices: ({
    data
  }: {
    data: RawPriceItem[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OracleClient extends OracleQueryClient implements OracleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updatePrices = this.updatePrices.bind(this);
  }

  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    scheduler,
    worker
  }: {
    admin?: string;
    scheduler?: string;
    worker?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        scheduler,
        worker
      }
    }, fee, memo, _funds);
  };
  updatePrices = async ({
    data
  }: {
    data: RawPriceItem[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_prices: {
        data
      }
    }, fee, memo, _funds);
  };
}