/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export class PlatformQueryClient {
  constructor(client, contractAddress) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
    this.queryBoxList = this.queryBoxList.bind(this);
  }
  queryConfig = async () => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
  queryBoxList = async () => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_box_list: {}
    });
  };
}
export class PlatformClient extends PlatformQueryClient {
  constructor(client, sender, contractAddress) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.noisReceive = this.noisReceive.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.requestBoxList = this.requestBoxList.bind(this);
  }
  noisReceive = async ({
    callback
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      nois_receive: {
        callback
      }
    }, fee, memo, _funds);
  };
  acceptAdminRole = async (fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    boxListLength,
    boxPrice,
    priceAndWeightList,
    proxy,
    worker
  }, fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        box_list_length: boxListLength,
        box_price: boxPrice,
        price_and_weight_list: priceAndWeightList,
        proxy,
        worker
      }
    }, fee, memo, _funds);
  };
  requestBoxList = async (fee = "auto", memo, _funds) => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request_box_list: {}
    }, fee, memo, _funds);
  };
}