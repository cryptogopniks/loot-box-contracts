/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { RawPriceItem, Uint64, Config, ArrayOfPriceItem } from "./Oracle.types";
export interface OracleReadOnlyInterface {
    contractAddress: string;
    queryConfig: () => Promise<Config>;
    queryPrices: ({ collectionAddresses, limit, startAfter }: {
        collectionAddresses?: string[];
        limit?: number;
        startAfter?: string;
    }) => Promise<ArrayOfPriceItem>;
    queryBlockTime: () => Promise<Uint64>;
}
export declare class OracleQueryClient implements OracleReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    queryConfig: () => Promise<Config>;
    queryPrices: ({ collectionAddresses, limit, startAfter }: {
        collectionAddresses?: string[] | undefined;
        limit?: number | undefined;
        startAfter?: string | undefined;
    }) => Promise<ArrayOfPriceItem>;
    queryBlockTime: () => Promise<Uint64>;
}
export interface OracleInterface extends OracleReadOnlyInterface {
    contractAddress: string;
    sender: string;
    acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, scheduler, worker }: {
        admin?: string;
        scheduler?: string;
        worker?: string;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updatePrices: ({ data }: {
        data: RawPriceItem[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class OracleClient extends OracleQueryClient implements OracleInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, scheduler, worker }: {
        admin?: string | undefined;
        scheduler?: string | undefined;
        worker?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
    updatePrices: ({ data }: {
        data: RawPriceItem[];
    }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
